
All instructions are encdoded by 2 bytes, in big endian.

Every instruction has between 0 and 3 operands
<opname> <operand1>, <operand2>, ...

operand types:
- X/Y: 4bits to represent a register index
- N: 4bits immediate
- NN: 8 bits immediate
- NNN: 12 bits immediate, only used to represent an address

For every instruction, there is also an assembly syntax. This is personal choice for my assembler, and not standard.

Some instructions set the Flag registers VF. It is set only if precised

They are 35 different instructions:

0: 0NNN <NNN>

Operands:
Addr: <NNN>

Assembly Syntax:
sys <Addr>

Effects:
Program aborts

Description:
Call native program at address <Addr>. Not implemented.






1: 00E0


Assembly Syntax:
cls

Effects:
screen_mat[::] <- 0

Description:
Clear the whole screen




2: 00EE

Assembly Syntax:
ret

Effects:
pc <- stack.pop()

Description:
Returns from the current subsoutine





3: 1NNN <NNN>

Operands:
Addr: <NNN>

Assembly Syntax:
jmp <Addr>

Effects:
pc <- <Addr>

Description:
Jump to address <Addr>





4: 2NNN <NNN>

Operands:
Addr: <NNN>

Assembly Syntax:
call <Addr>

Effects:
stack.push(pc + 2) #next ins
pc <- <Addr>

Description:
Cat subroutine at <Addr>





5: 3XNN <X, NN>

Operands:
Reg X: <X>
Immediate I: <NN>

Assembly Syntax:
skpe I, %v<X>, 

Effects:
if (Vx == I)
   pc += 2

Description:
Skip next instruction if VX == I






6: 4XNN <X, NN>

Operands:
Reg X: <X>
Immediate I: <NN>

Assembly Syntax:
skpn I, %v<X>, 

Effects:
if (VX != I)
   pc += 2

Description:
Skip next instruction if VX != I





7: 5XY0 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
skpe %v<Y>, %v<X>, 

Effects:
if (VY == VX)
   pc += 2

Description:
Skip next instruction if VX == VY






8: 6XNN <X, NN>

Operands:
Reg X: <X>
Imm I: <NN>

Assembly Syntax:
mov I, %v<X>

Effects:
Vx <- I

Description:
Load immediate 8bit val to register





9: 7XNN <X, NN>

Operands:
Reg X: <X>
Imm I: <NN>

Assembly Syntax:
add I, %v<X>

Effects:
VX <- VX + I

Description:
Add 8b immediate value I to register VX





10: 8XY0 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
mov %v<Y>, %v<X>

Effects:
VX <- VY

Description:
Load value of reg V<Y> into reg <X>





11: 8XY1 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
or %v<Y>, %v<X>

Effects:
VX <- VX | VY

Description:
Or V<X> with V<Y> and store back result in V<X>






12: 8XY2 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
and %v<Y>, %v<X>

Effects:
VX <- VX & VY

Description:
And V<X> with V<Y> and store back result in V<X>







13: 8XY3 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
xor %v<Y>, %v<X>

Effects:
VX <- VX ^ VY

Description:
Xor V<X> with V<Y> and store back result in V<X>






14: 8XY4 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
add %v<Y>, %v<X>

Effects:
VF <- VX + VY > 255 ? 1 : 0
VX <- VX + VY

Description:
Add V<Y> to V<X> and store back result in V<X>
Set VF to 1 if there is carry, otherwhise to 0




15: 8XY5 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
sub %v<Y>, %v<X>

Effects:
VF <- VX > Vy ? 1 : 0
VX <- VX - VY


Description:
Substract V<Y> from V<Y> and store back result in V<X>
Set VF to 0 if there is borrow, otherwhise to 1





16: 8XY6 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
shr %v<Y>, %v<X>

Effects:
VF <- VY & 0x1
VX <- VY >> 1

Description:
Do a logical shift right of V<Y>, and store result in V<X>
Set VF to 1 is the least significant bit of V<Y> is set, otherwhise to 0
(prior to shifting)
Remarks: Some implems ignore V<Y>, they load and store from V<X>.





17: 8XY7 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
subn %v<Y>, %v<X>

Effects:
VF <- VY > VX ? 1 : 0
VX <- VY - VX


Description:
Substract V<X> from V<Y> and store back result in V<X>
Set VF to 0 if there is borrow, otherwhise to 1







18: 8XYE <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
shl %v<Y>, %v<X>

Effects:
VF <- VY & 0x80 ? 1 : 0
VX <- VY << 1

Description:
Do a logical shift left of V<Y>, and store result in V<X>
Set VF to 1 is the most significant bit of V<Y> is set, otherwhise to 0
(prior to shifting)
Remarks: Some implems ignore V<Y>, they load and store from V<X>.






19: 9XY0 <X, Y>

Operands:
Reg X: <X>
Reg Y: <Y>

Assembly Syntax:
skipn %v<Y>, %v<X>

Effects:
if (VY != VX)
  pc += 2



Description:
Skip next instruction if VY != VX







20: ANNN <NNN>

Operands:
Addr: <NNN>

Assembly Syntax:
mov <Addr>, %i

Effects:
I <- <Addr>

Description:
Set the address stored in I at <Addr>






21: BNNN <NNN>

Operands:
Addr: <NNN>

Assembly Syntax:
jmp <Addr>(%v0)

Effects:
pc <- <Addr> + <V0>

Description:
Jump to <ADDR> + V0






22: CXNN <X, NN>

Operands:
Reg X: <X>
Imm I: <NN>

Assembly Syntax:
rand I, %v<X>

Effects:
V<X> <- Rand(0, 256) & <I>

Description:
Generate a number between 0 and 255 included, xor it with Immediate <I>, and store it to reg V<X>





23: DXYN <X, Y, N>

Operands:
Reg X: <X>
Reg Y: <Y>
Imm I: <N>

Assembly Syntax:
draw %v<X>, %v<Y>, <I>

Effects:
See description

Description:
Load sprite of width 8 and height N, stored at addr of reg I.
Each row is stored in one byte (1 cell per bit).
Sprite is drawn at location (V<X>, V<Y>).
When drawing, every bit at 1 on the sprite is flipped on the screen.
If any bit it flipped from 1 to 0, VF is set to 1, otherwhise to 0.
If (x, y) out of screen bounds, apply modulo.
If sprite goes off-screen, it's clipped.
When drawing 1 byte, the msb correspond to the left-most pixel,
and the lsb to the right-might pixel.





24: EX9E <X>

Operands:
Reg X: <X>

Assembly Syntax:
skpkp %v<X>

Effects:
if (key_pressed(V<X>))
  pc += 2

Description:
Skip the next instruction if the key stored in V<X> is pessed





25: EXA1 <X>

Operands:
Reg X: <X>

Assembly Syntax:
skpkn %v<X>

Effects:
if (!key_pressed(V<X>))
  pc += 2

Description:
Skip the next instruction if the key stored in V<X> is not pessed






26: FX07 <X>

Operands:
Reg X: <X>

Assembly Syntax:
mov %dt, %v<X>

Effects:
V<X> <- DelayTimer

Description:
Set V<X> to the value of the Delay Timer.






27: FX0A <X>

Operands:
Reg X: <X>

Assembly Syntax:
waitk %v<X>

Effects:
V<X> <- wait_key()

Description:
Block the program until a key is pressed
Set V<X> to the value of the pressed key
Ref doesn't tell what happens if multiple keys are pressed.
I return the one with the lowest index.






28: FX15 <X>

Operands:
Reg X: <X>

Assembly Syntax:
mov %v<X>, %dt

Effects:
DelayTimer <- V<X>

Description:
Set the Delay Timer to V<X>





29: FX18 <X>

Operands:
Reg X: <X>

Assembly Syntax:
mov %v<X>, %st

Effects:
SountTimer <- V<X>

Description:
Set the Sound Timer to V<X>






30: FX1E <X>

Operands:
Reg X: <X>

Assembly Syntax:
add %v<X>, %i

Effects:
#VF <- I + V<X> > 0xFFF ? 1 : 0 (See Remarks)
I <- I + V<X>

Description:
Add V<X> to I.
Undocument feature, according to Wikipedia Page:
If the calculation overflows the valid range (0xFFF), VF is set to 1, otherwhise to 0.
Remarks: Some implems, like mine, dont implement VF edit






31: FX29 <X>

Operands:
Reg X: <X>

Assembly Syntax:
fspr %v<X>

Effects:
I <- get_sprite_addr_of_hex_digit(V<X> & 0xF)

Description:
Sets I to the location of the sprite for hexa digit char in V<X>, in 4*5 font.
This font is loaded to memory at initialization, and stored at addr below 0x512
Binary code for the font can be found at:
https://github.com/mattmikolay/chip-8/wiki/CHIP%E2%80%908-Technical-Reference#fonts
V<X> in range 0-255, I & oxF to get hexa digit






32: FX33 <X>

Operands:
Reg X: <X>

Assembly Syntax:
bcd %v<X>

Effects:
I[0:2] <- bcd(V<X>)

Description:
Compute BCD representation of V<X>: store hundreds digit at I[0], tens digit at I[1],
and units at I[2]






33: FX55 <X>

Operands:
Reg X: <X>

Assembly Syntax:
movm %v<X>, %i

Effects:
I[0:<X>+1] <- (V0, V1, ..., V<X>)
I <- I + <X> + 1

Description:
Store registers V0 to V<X> in order at adresses starting at I.
Then increment I by <X> + 1
Remarks: Some versions don't modify I






34: FX65 <X>

Operands:
Reg X: <X>

Assembly Syntax:
movm %i, %v<X>

Effects:
(V0, V1, ..., V<X>) <- I[0:<X>+1]
I <- I + <X> + 1

Description:
Load registers V0 to V<X> in order from data at adresses starting at I.
Then increment I by <X> + 1
Remarks: Some versions don't modify I
